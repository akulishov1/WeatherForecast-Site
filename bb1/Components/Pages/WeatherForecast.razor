@page "/"
@rendermode InteractiveServer
@inject Services.WeatherRecordsService WeatherRecordsService
@inject Services.WeatherDataRequestService WeatherDataRequestService
@inject bb1.Services.WeatherRepositoryService WeatherRepositoryService
@using Models
@using bb1.Services

<style>
    body {
    background-image: url('https://upload.wikimedia.org/wikipedia/commons/4/42/Blue_sky%2C_white-gray_clouds.JPG');
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-color: lightblue;
    }
</style>

<DxGridLayout CssClass="main-container" ColumnSpacing="8px" RowSpacing="20px"
style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;">
    <Rows>
        <DxGridLayoutRow Areas="mainContent" />
        <DxGridLayoutRow Areas="controls" />
    </Rows>
    <Items>
        <DxGridLayoutItem Area="mainContent">
            <Template>
                <div class="main-content" style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
                    @if (DataList.ContainsKey(DayNumber) && DataList[DayNumber] != null && DataList[DayNumber].Any())
                    {
                        foreach (var WeatherRecord in DataList[DayNumber])
                        {
                            <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="120px"
                                          style="background-color: rgba(155, 221, 255, 0.7); width: 700px; height: 500px; border-radius: 40px;">
                                <Rows>
                                    <DxGridLayoutRow Areas="Time" />
                                    <DxGridLayoutRow Areas="Temperature" />
                                    <DxGridLayoutRow Areas="DetalizedInfo" />
                                </Rows>
                                <Items>
                                    <DxGridLayoutItem Area="Time">
                                        <Template>
                                            <div class="gridlayout-header gridlayout-item" style="text-align: center; font-size: 50px;margin-bottom: 20px;">
                                                Time now : @CurrentTime.ToString(@"hh\:mm\:ss")
                                            </div>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem Area="Temperature">
                                        <Template>
                                            <div class="gridlayout-content gridlayout-item" style="text-align: center; font-size: 50px;">
                                                @WeatherRecord.Temperature °C
                                            </div>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem Area="DetalizedInfo">
                                        <Template>
                                            <div class="gridlayout-footer gridlayout-item" style="text-align: center; font-size: 30px;">
                                                Wind speed: @WeatherRecord.WindSpeed m/s - Temperature feels like: @WeatherRecord.TemperatureFeels °C
                                            </div>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        }
                    }
                    else
                    {
                        <div style="text-align: center; font-size: 40px;">No Data Available for Selected Day</div>
                    }
                </div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="controls">
            <Template>
                <div style="display: flex; justify-content: center; align-items: center;">
                    <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="10px"
                    style="background-color: rgba(155, 221, 255, 0.7); width: 800px; height: 150px; border-radius: 40px;">
                        <Rows>
                            <DxGridLayoutRow Areas="Buttons" />
                        </Rows>
                        <Items>
                            <DxGridLayoutItem Area="Buttons">
                                <Template>

                                    <div class="gridlayout-header gridlayout-item" style="display: flex; justify-content: center; align-items: center; gap: 20px;">

                                        <DxButton Click="() => Day(1)" style="width: 150px; height: 150px; border-radius: 0px; background-color: burlywood; border-color: aqua">
                                            <div style="display: flex; flex-direction: column; align-items: center;">
                                                <span style="font-size: 16px;">Weather Data for Day 1:</span>
                                                <span style="font-size: 16px; margin-top: 5px;">
                                                    @(DataList.ContainsKey(1) && DataList[1].Any()
                                                        ? string.Join(", ", DataList[1].Select(day => $"{day.Temperature}°C - {day.WindSpeed} m/s"))
                                                        : "No Data")
                                                </span>
                                            </div>
                                        </DxButton>

                                        <DxButton Click="() => Day(2)" style="width: 150px; height: 150px; border-radius: 0px; background-color: burlywood; border-color: aqua">
                                            <div style="display: flex; flex-direction: column; align-items: center;">
                                                <span style="font-size: 16px;">Weather Data for Day 2:</span>
                                                <span style="font-size: 16px; margin-top: 5px;">
                                                    @(DataList.ContainsKey(2) && DataList[2].Any()
                                                        ? string.Join(", ", DataList[2].Select(day => $"{day.Temperature}°C - {day.WindSpeed} m/s"))
                                                        : "No Data")
                                                </span>
                                            </div>
                                        </DxButton>

                                        <DxButton Click="() => Day(3)" style="width: 150px; height: 150px; border-radius: 0px; background-color: burlywood; border-color: aqua">
                                            <div style="display: flex; flex-direction: column; align-items: center;">
                                                <span style="font-size: 16px;">Weather Data for Day 3:</span>
                                                <span style="font-size: 16px; margin-top: 5px;">
                                                    @(DataList.ContainsKey(3) && DataList[3].Any()
                                                        ? string.Join(", ", DataList[3].Select(day => $"{day.Temperature}°C - {day.WindSpeed} m/s"))
                                                        : "No Data")
                                                </span>
                                            </div>
                                        </DxButton>

                                        <DxButton Click="() => Day(4)" style="width: 150px; height: 150px; border-radius: 0px; background-color: burlywood; border-color: aqua">
                                            <div style="display: flex; flex-direction: column; align-items: center;">
                                                <span style="font-size: 16px;">Weather Data for Day 4:</span>
                                                <span style="font-size: 16px; margin-top: 5px;">
                                                    @(DataList.ContainsKey(4) && DataList[4].Any()
                                                        ? string.Join(", ", DataList[4].Select(day => $"{day.Temperature}°C - {day.WindSpeed} m/s"))
                                                        : "No Data")
                                                </span>
                                            </div>
                                        </DxButton>

                                        <DxButton Click="() => Day(5)" style="width: 150px; height: 150px; border-radius: 0px; background-color: burlywood; border-color: aqua">
                                            <div style="display: flex; flex-direction: column; align-items: center;">
                                                <span style="font-size: 16px;">Weather Data for Day 5:</span>
                                                <span style="font-size: 16px; margin-top: 5px;">
                                                    @(DataList.ContainsKey(5) && DataList[5].Any()
                                                        ? string.Join(", ", DataList[5].Select(day => $"{day.Temperature}°C - {day.WindSpeed} m/s"))
                                                        : "No Data")
                                                </span>
                                            </div>
                                        </DxButton>
                                    </div>
                                </Template>
                            </DxGridLayoutItem>
                        </Items>
                    </DxGridLayout>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

@code {
    private DateTime CurrentDate;
    private TimeSpan CurrentTime;

    private int DayNumber;
    private int NextDayNumber;

    private List<WeatherRecord> NextDayDataList = new List<WeatherRecord>();
    private Dictionary<int, List<WeatherRecord>> DataList = new Dictionary<int, List<WeatherRecord>>();

    protected override async Task OnInitializedAsync()
    {
        DayNumber = 1;
        CurrentDate = WeatherRecordsService.ServerDateCheck();
        CurrentTime = WeatherRecordsService.GetServerTime();

        _ = Task.Run(async () =>
        {
            while (true)
            {
                CurrentTime = WeatherRecordsService.GetServerTime();
                StateHasChanged();
                await Task.Delay(1000); // Refresh every second
            }
        });

        var isUpToDate = await WeatherRepositoryService?.IsWeatherDataUpToDateAsync();
        var isTableEmpty = await WeatherRepositoryService.IsTableEmptyAsync();

        if (!isUpToDate || isTableEmpty)
        {
            var weatherService = new WeatherDataRequestService.WeatherService(new HttpClient());
            var weatherData = await weatherService.FetchWeatherDataAsync();
            await WeatherRepositoryService.SaveWeatherDataAsync(weatherData);
        }

        var ReceivedDayData = await WeatherRecordsService.GetDataByDayNumberAsync(DayNumber);
        if (!DataList.ContainsKey(DayNumber))
        {
            DataList[DayNumber] = ReceivedDayData.Where(day => day.Id == DayNumber).ToList();
        }
    }

    private async Task Day(int selectedDayNumber)
    {
        DayNumber = selectedDayNumber;

        var receivedData = await WeatherRecordsService.GetDataByDayNumberAsync(DayNumber);

        if (receivedData != null && receivedData.Any())
        {
            DataList[DayNumber] = receivedData.Where(day => day.Id == DayNumber).ToList();
        }
        else
        {
            DataList[DayNumber] = null; // Set to null if no data exists
        }

        StateHasChanged();
    }


    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool ToggledSidebar { get; set; }
}