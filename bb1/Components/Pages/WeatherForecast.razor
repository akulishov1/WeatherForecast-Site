@page "/"
@rendermode InteractiveServer
@inject Services.WeatherRecordsService WeatherRecordsService
@inject Services.WeatherDataRequestService WeatherDataRequestService
@inject bb1.Services.WeatherRepositoryService WeatherRepositoryService
@using Models
@using bb1.Services

<style>
    body {
    background-image: url('https://upload.wikimedia.org/wikipedia/commons/4/42/Blue_sky%2C_white-gray_clouds.JPG');
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-color: lightblue;
    }
</style>

<DxGridLayout CssClass="main-container" ColumnSpacing="8px" RowSpacing="60px"
style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;">
    <Rows>
        <DxGridLayoutRow Areas="mainContent" />
        <DxGridLayoutRow Areas="controls" />
    </Rows>
    <Items>
        <DxGridLayoutItem Area="mainContent">
            <Template>
                <div class="main-content"
                style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    @if (DataList.ContainsKey(DayNumber) && DataList[DayNumber].Any())
                    {
                        var weatherRecord = DataList[DayNumber].First();

                        <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="60px"
                        style="background-color: rgba(155, 221, 255, 0.7); width: 720px; height: 700px; border-radius: 40px;">
                            <Rows>
                                <DxGridLayoutRow Areas="Time" />
                                <DxGridLayoutRow Areas="Temperature" />
                                <DxGridLayoutRow Areas="Windspeed" />
                                <DxGridLayoutRow Areas="MinMaxTemperature" />
                            </Rows>
                            <Items>
                                <DxGridLayoutItem Area="Time">
                                    <Template>
                                        <div style="text-align: center; font-size: 50px; margin-bottom: 30px;">
                                            Time now: @CurrentTime.ToString(@"hh\:mm\:ss")
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="Temperature">
                                    <Template>
                                        <div style="text-align: center; font-size: 30px;">
                                            Average Temperature is: @weatherRecord.AvgTemperature °C <p style="margin-top: 10px;">Minimal Temperature is: @weatherRecord.MinTemperature °C</p> <p style="margin-top: 10px;">Maximum Temperature is: @weatherRecord.MaxTemperature °C</p>
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="Windspeed">
                                    <Template>
                                        <div style="text-align: center; font-size: 30px;">
                                            Average Wind speed: @weatherRecord.AvgWindSpeed m/s
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="MinMaxTemperature">
                                    <Template>
                                        <!-- Flex container with horizontal items -->
                                        <div style="display: flex; gap: 10px; width: 100%; justify-content: center;">
                                            <div style="flex: 1; background-color: #FFEFEB; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px; color: black;">
                                                Morning: @weatherRecord.TemperatureMorn °C
                                            </div>
                                            <div style="flex: 1; background-color: #EBFCEF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Day: @weatherRecord.TemperatureDay °C
                                            </div>
                                            <div style="flex: 1; background-color: #F0EBFF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Evening: @weatherRecord.TemperatureEve °C
                                            </div>
                                            <div style="flex: 1; background-color: #EBF0FF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Night: @weatherRecord.TemperatureNight °C
                                            </div>
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                            </Items>
                        </DxGridLayout>
                    }
                    else
                    {
                        <div style="text-align: center; font-size: 40px;">
                            No Data Available for Selected Day
                        </div>
                    }
                </div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="controls">
            <Template>
                <div style="display: flex; justify-content: center; align-items: center;">
                    <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="10px"
                    style="background-color: rgba(155, 221, 255, 0.7); width: 800px; height: 150px; border-radius: 40px;">
                        <Rows>
                            <DxGridLayoutRow Areas="Buttons" />
                        </Rows>
                        <Items>
                            <DxGridLayoutItem Area="Buttons">
                                <Template>

                                    <div class="gridlayout-header gridlayout-item" style="display: flex; justify-content: center; align-items: center; gap: 20px;">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            int currentDay = i; // capture current value
                                            <DxButton Click="@(async () => await Day(currentDay))"
                                                      style="width:150px; height:150px; border-radius:10px; background-color:burlywood; border-color:aqua">
                                                <div style="display: flex; flex-direction: column; align-items: center;">
                                                    <span style="font-size: 16px;">
                                                        @(DataList.ContainsKey(currentDay) && DataList[currentDay].Any()
                                                            ? DataList[currentDay].First().CellDate.ToString("dddd")
                                                            : $"Weather Data for {currentDay}")
                                                    </span>
                                                    <span style="font-size: 16px; margin-top: 5px;">
                                                        @(DataList.ContainsKey(currentDay) && DataList[currentDay].Any()
                                                            ? string.Join(", ", DataList[currentDay].Select(day => $"{day.AvgTemperature}°C - {day.AvgWindSpeed} m/s"))
                                                            : "No Data")
                                                    </span>
                                                </div>
                                            </DxButton>
                                        }
                                    </div>
                                </Template>
                            </DxGridLayoutItem>
                        </Items>
                    </DxGridLayout>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

@code {
    private TimeSpan CurrentTime;
    private int DayNumber = 1;

    // Holds WeatherRecord objects fetched for each day.
    private Dictionary<int, List<WeatherRecord>> DataList = new Dictionary<int, List<WeatherRecord>>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize the current time.
        CurrentTime = WeatherRecordsService.GetServerTime();

        // Update the time every second.
        _ = Task.Run(async () =>
        {
            while (true)
            {
                CurrentTime = WeatherRecordsService.GetServerTime();
                // Use InvokeAsync to marshal the call to the correct synchronization context.
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1000);
            }
        });

        // Check if the weather data is up-to-date and if the table is empty.
        var isUpToDate = await WeatherRepositoryService?.IsWeatherDataUpToDateAsync();
        var isTableEmpty = await WeatherRepositoryService.IsTableEmptyAsync();

        if (!isUpToDate || isTableEmpty)
        {
            var weatherService = new WeatherDataRequestService.WeatherService(new HttpClient());
            var weatherData = await weatherService.FetchWeatherDataAsync();
            await WeatherRepositoryService.SaveWeatherDataAsync(weatherData);
        }

        // Populate DataList for days 1 to 5.
        for (int day = 1; day <= 5; day++) // Adjust based on available day count.
        {
            var receivedData = await WeatherRecordsService.GetDataByDayNumberAsync(day);
            DataList[day] = receivedData?.Where(record => record.Id == day).ToList() ?? new List<WeatherRecord>();
        }
    }

    // This method gets called when a day button is clicked.
    private async Task Day(int selectedDayNumber)
    {
        DayNumber = selectedDayNumber;
        var receivedData = await WeatherRecordsService.GetDataByDayNumberAsync(DayNumber);
        DataList[DayNumber] = receivedData?.Where(record => record.Id == DayNumber).ToList() ?? new List<WeatherRecord>();

        // Call StateHasChanged using InvokeAsync for thread safety.
        await InvokeAsync(StateHasChanged);
    }

    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool ToggledSidebar { get; set; }
}