@page "/"
@rendermode InteractiveServer
@inject WeatherRecordsService WeatherRecordsService
@inject WeatherDataRequestService WeatherDataRequestService
@inject WeatherProcessorService WeatherRepositoryService
@inject Services.WeatherInterfaces.IWeatherService _weatherService
@inject WeatherDataVerification WeatherDataVerification
@using Models
@using bb1.Services

<style>
    body {
    background-image: url('https://upload.wikimedia.org/wikipedia/commons/4/42/Blue_sky%2C_white-gray_clouds.JPG');
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-color: lightblue;
    }
</style>
<div style="position: page; top: 100px; left: 450px; z-index: 1000;">
    <select @onchange="OnSiteChanged" class="form-select" style="width: auto; min-width: 150px;" value="@SelectedSiteKey">
        @foreach (var site in ApiRecordsList)
        {
            <option value="@site.Key">@site.Name</option>
        }
    </select>
</div>

<div style="position: page; top: 140px; left: 450px; z-index: 1000;">
    <select @onchange="OnCityChanged" class="form-select" style="width: auto; min-width: 150px;" value="@SelectedCityID">
        @foreach (var city in CityRecordsList)
        {
            <option value="@city.Id">@city.CityName</option>
        }
    </select>
</div>

<DxGridLayout CssClass="main-container" ColumnSpacing="8px" RowSpacing="60px"
style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;">
    <Rows>
        <DxGridLayoutRow Areas="mainContent" />
        <DxGridLayoutRow Areas="controls" />
    </Rows>
    <Items>
        <DxGridLayoutItem Area="mainContent">
            <Template>
                <div class="main-content"
                style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    @if(IsLoading)
                    {
                        <div style="text-align: center; font-size: 40px; color: white;">
                            Await for data update...
                        </div>
                    }
                    else if (DataList.ContainsKey(DayNumber) && DataList[DayNumber].Any())
                    {
                        var weatherRecord = DataList[DayNumber].First();

                        <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="60px"
                        style="background-color: rgba(155, 221, 255, 0.7); width: 720px; height: 700px; border-radius: 40px;">
                            <Rows>
                                <DxGridLayoutRow Areas="Time" />
                                <DxGridLayoutRow Areas="NameOfTheChosenDay" />
                                <DxGridLayoutRow Areas="Temperature" />
                                <DxGridLayoutRow Areas="Windspeed" />
                                <DxGridLayoutRow Areas="MinMaxTemperature" />
                            </Rows>
                            <Items>
                                <DxGridLayoutItem Area="Time">
                                    <Template>
                                        <div style="text-align: center; font-size: 50px;margin-bottom: 30px;">
                                            Time now: @CurrentTime.ToString(@"hh\:mm\:ss")
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="NameOfTheChosenDay">
                                    <Template>
                                        <div style="text-align: center; font-size: 50px;">
                                            Selected Day is: @SelectedDayName
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="Temperature">
                                    <Template>
                                        <div style="text-align: center; font-size: 30px;">
                                            Average Temperature is: @DetailedRecord.AvgTemperature °C <p style="margin-top: 10px;">Minimal Temperature is: @DetailedRecord.MinTemperature °C</p> <p style="margin-top: 10px;">Maximum Temperature is: @DetailedRecord.MaxTemperature °C</p>
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="Windspeed">
                                    <Template>
                                        <div style="text-align: center; font-size: 30px;">
                                            Average Wind speed: @DetailedRecord.AvgWindSpeed m/s
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                                <DxGridLayoutItem Area="MinMaxTemperature">
                                    <Template>
                                        <!-- Flex container with horizontal items -->
                                        <div style="display: flex; gap: 10px; width: 100%; justify-content: center;">
                                            <div style="flex: 1; background-color: #FFEFEB; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px; color: black;">
                                                Morning: @DetailedRecord.TemperatureMorn °C
                                            </div>
                                            <div style="flex: 1; background-color: #EBFCEF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Day: @DetailedRecord.TemperatureDay °C
                                            </div>
                                            <div style="flex: 1; background-color: #F0EBFF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Evening: @DetailedRecord.TemperatureEve °C
                                            </div>
                                            <div style="flex: 1; background-color: #EBF0FF; padding: 10px; border-radius: 10px; text-align: center; font-size: 20px;color: black;">
                                                Night: @DetailedRecord.TemperatureNight °C
                                            </div>
                                        </div>
                                    </Template>
                                </DxGridLayoutItem>
                            </Items>
                        </DxGridLayout>
                    }
                    else
                    {
                        <div style="text-align: center; font-size: 40px;">
                            No Data Available for Selected Day
                        </div>
                    }
                </div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="controls">
            <Template>
                <div style="display: flex; justify-content: center; align-items: center;">
                    <DxGridLayout CssClass="h-60" ColumnSpacing="8px" RowSpacing="10px"
                    style="background-color: rgba(155, 221, 255, 0.7); width: 800px; height: 150px; border-radius: 40px;">
                        <Rows>
                            <DxGridLayoutRow Areas="Buttons" />
                        </Rows>
                        <Items>
                            <DxGridLayoutItem Area="Buttons">
                                <Template>

                                    <div class="gridlayout-header gridlayout-item" style="display: flex; justify-content: center; align-items: center; gap: 20px;">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            int currentDay = i; // capture current value
                                            bool isSelected = DayNumber == currentDay; //Selected Button logic
                                            string borderStyle = isSelected ? "5px solid steelblue" : "1px solid aqua";

                                            <div style="width: 150px; height: 150px; border-radius: 10px; background-color: burlywood; border: @borderStyle; display: flex; justify-content: center; align-items: center; cursor: pointer;"
                                                 @onclick="@(async () => await Day(currentDay))">

                                                <div style="display: flex; flex-direction: column; align-items: center;">
                                                    <span style="font-size: 16px; text-align: center;">
                                                        @(DataList.ContainsKey(currentDay) && DataList[currentDay].Any()
                                                            ? DataList[currentDay].First().CellDate.ToString("dddd")
                                                            : $"Weather Data for {currentDay}")
                                                    </span>
                                                    <span style="font-size: 16px; margin-top: 5px; text-align: center;">
                                                        @(DataList.ContainsKey(currentDay) && DataList[currentDay].Any()
                                                            ? string.Join(", ", DataList[currentDay].Select(day => $"{day.AvgTemperature}°C - {day.AvgWindSpeed} m/s"))
                                                            : "No Data")
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </Template>
                            </DxGridLayoutItem>
                        </Items>
                    </DxGridLayout>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

@code {
    private TimeSpan CurrentTime;
    private int DayNumber = 1;
    private int SelectedSiteID;
    private int SelectedCityID;
    private string SelectedSiteKey { get; set; } = "";
    private bool IsLoading = false;

    private List<CityRecord> CityRecordsList = new();
    private List<ApiRecord> ApiRecordsList = new();
    private CancellationTokenSource _cts = new();

    private Dictionary<int, List<WeatherRecordBase>> DataList = new();

    private WeatherRecordBase? DetailedRecord =>
        DataList.ContainsKey(DayNumber) && DataList[DayNumber].Any()
            ? DataList[DayNumber].First()
            : null;

    private string SelectedDayName =>
        DataList.ContainsKey(DayNumber) && DataList[DayNumber].Any()
            ? DataList[DayNumber].First().CellDate.ToString("dddd")
            : "Unknown";

    protected override async Task OnInitializedAsync()
    {
        CurrentTime = WeatherRecordsService.GetServerTime();

        _ = Task.Run(async () =>
        {
            while (!_cts.Token.IsCancellationRequested)
            {
                CurrentTime = WeatherRecordsService.GetServerTime();
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1000, _cts.Token);
            }
        });

        CityRecordsList = await WeatherRecordsService.GetListOfAllCitiesAsync();
        if (CityRecordsList.Any())
        {
            SelectedCityID = CityRecordsList.First().Id;
        }

        ApiRecordsList = await WeatherRecordsService.GetListOfAllSitesAsync();
        if (ApiRecordsList.Any())
        {
            var first = ApiRecordsList.First();
            SelectedSiteKey = first.Key;
            SelectedSiteID = first.Id;
        }

        await WeatherRecordsService.EnsureWeatherDataUpToDateAsync(SelectedSiteID, SelectedCityID);
        await LoadDataListAsync();
    }

    private async Task OnSiteChanged(ChangeEventArgs e)
    {
        var newSiteKey = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(newSiteKey) || newSiteKey == SelectedSiteKey)
            return;

        SelectedSiteKey = newSiteKey;

        var apiRecord = ApiRecordsList.FirstOrDefault(r => r.Key == SelectedSiteKey);
        if (apiRecord == null)
            throw new Exception($"API record with key {SelectedSiteKey} not found");

        SelectedSiteID = apiRecord.Id;

        IsLoading = true;
        StateHasChanged();

        try
        {
            bool isValid = await WeatherRecordsService.EnsureWeatherDataUpToDateAsync(SelectedSiteID, SelectedCityID);
            if (!isValid)
            {
                var coords = await WeatherRecordsService.GetCityCoordinatesAsync(SelectedCityID);
                if (coords.HasValue)
                {
                    var weatherData = await _weatherService.FetchWeatherDataAsync(SelectedSiteKey, (float)coords.Value.Latitude, (float)coords.Value.Longitude);

                    string cityName = CityRecordsList.FirstOrDefault(c => c.Id == SelectedCityID)?.CityName ?? "";

                    await WeatherRecordsService.SaveWeatherDataAsync(SelectedSiteKey, weatherData, cityName);
                }
                else
                {
                    throw new Exception("Coordinates not found for the selected city");
                }
            }

            await LoadDataListAsync();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCityChanged(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out int newCityId))
            return;

        if (newCityId == SelectedCityID)
            return;

        SelectedCityID = newCityId;

        IsLoading = true;
        StateHasChanged();

        try
        {
            bool isValid = await WeatherRecordsService.EnsureWeatherDataUpToDateAsync(SelectedSiteID, SelectedCityID);
            if (!isValid)
            {
                var coords = await WeatherRecordsService.GetCityCoordinatesAsync(SelectedCityID);
                if (!coords.HasValue)
                    throw new Exception("Coordinates not found for the selected city");

                // Получаем имя города из уже загруженного списка CityRecordsList
                var cityName = CityRecordsList.FirstOrDefault(c => c.Id == SelectedCityID)?.CityName ?? "";

                var weatherData = await _weatherService.FetchWeatherDataAsync(SelectedSiteKey, (float)coords.Value.Latitude, (float)coords.Value.Longitude);

                // Передаем cityName в SaveWeatherDataAsync, если метод принимает
                await WeatherRecordsService.SaveWeatherDataAsync(SelectedSiteKey, weatherData, cityName);
            }

            await LoadDataListAsync();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDataListAsync()
    {
        IsLoading = true;
        StateHasChanged();

        DataList = await WeatherRecordsService.GetWeatherDataListAsync(SelectedSiteID, SelectedCityID);

        IsLoading = false;
        StateHasChanged();
    }

    private async Task Day(int selectedDayNumber)
    {
        if (selectedDayNumber == DayNumber)
            return;

        IsLoading = true;
        StateHasChanged();

        DayNumber = selectedDayNumber;

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool ToggledSidebar { get; set; }
}